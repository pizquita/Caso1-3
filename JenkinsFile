pipeline {
    agent any
    environment {
        SAM_CONFIG_PATH = 'samconfig.toml' // ruta al archivo de configuraci贸n de SAM
        ENVIRONMENT = 'staging'  // entorno de despliegue
    }
    options {
        skipDefaultCheckout true
    }
    stages {
        stage('Get Code') {
            steps {
                cleanWs() 
                sh 'echo $WORKSPACE'  // Verifica el workspace
                
               withCredentials([string(credentialsId: 'GitToken', variable: 'GITHUB_TOKEN')]) {
                    git branch: 'develop', 
                        url: "https://oauth2:${GITHUB_TOKEN}@github.com/pizquita/Caso1-3.git"
                }
                
                sh '''
                    ls -la
                    echo $WORKSPACE
                '''
            }
        }
        stage('Static Test') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        . /opt/venv/jenkins/bin/activate
                        flake8 --format=pylint --exit-zero --output-file=flake8.out src || true
                    '''
                    //cat flake8.out
                    recordIssues tools: [flake8(pattern: 'flake8.out')]
                }
                
               catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                    sh '''
                        . /opt/venv/jenkins/bin/activate
                        bandit -r src -f json -o bandit.out --exit-zero || true
                    '''
                    //cat bandit.out
                    
                    recordIssues(tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')])
                    
                }
            }
        }
       stage('Build and Validate') {
            steps {
                script {
                    
                    // Validar que el archivo samconfig.toml existe
                    sh 'if [ ! -f $SAM_CONFIG_PATH ]; then echo "samconfig.toml not found!"; exit 1; fi'

                    // Construir la aplicaci贸n con AWS SAM
                    sh 'sam build'

                    // Validar la configuraci贸n de SAM antes de desplegar
                    sh 'sam validate --region us-east-1'
                }
            }
        }
        stage('Deploy') {
            steps {
                //solo despliego si detecta cambios en el c贸digo
                script {
                    def changes = sh(script: "git diff --quiet || echo 'changed'", returnStdout: true).trim()
                    if (changes == "changed") {
                        echo "Changes detected, proceeding with deployment."
                        sh '''
                            sam deploy --resolve-s3 --config-file $SAM_CONFIG_PATH --config-env $ENVIRONMENT --no-confirm-changeset
                        '''
                    } else {
                        echo "No changes detected, skipping deployment."
                    }
                }
            }
        }
        stage('Rest Test') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                        
                    sh '''
                        . /opt/venv/jenkins/bin/activate
                        pytest test/integration/todoApiTest.py --junitxml=result-unit.xml
                    '''
                    junit 'result-unit.xml'
                }
            }
        }
        stage('Promote') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    
                    sh '''
                       git status
                       git checkout master
                       git merge develop
                       git push
                    '''
                }
            }
        }
    }
}
