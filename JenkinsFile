pipeline {
    agent any
    environment {
        SAM_CONFIG_PATH = 'repo-config/samconfig.toml' // ruta al archivo de configuración de SAM
        ENVIRONMENT = 'production'  // entorno de despliegue
    }
    options {
        skipDefaultCheckout true
    }
    stages {
        stage('Get Code') {
            steps {
                cleanWs() 
                sh 'echo $WORKSPACE'  // Verifica el workspace
                
               withCredentials([string(credentialsId: 'GitToken', variable: 'GITHUB_TOKEN')]) {
                    git branch: 'master', 
                        url: "https://oauth2:${GITHUB_TOKEN}@github.com/pizquita/Caso1-3.git"
                }
                
                sh '''
                    ls -la
                    echo $WORKSPACE
                '''
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Asegurar limpieza previa y clonar el repositorio
                    sh 'rm -rf repo-config' // Asegurar limpieza previa
                    sh 'git clone --branch $ENVIRONMENT https://github.com/pizquita/todo-config.git repo-config'
                    
                    // Verificar que la variable se ha asignado correctamente
                    echo "SAM_CONFIG_PATH set to: ${env.SAM_CONFIG_PATH}"
                    
                    // Mostrar el contenido del archivo para ver si está bien clonado
                    sh "cat ${env.SAM_CONFIG_PATH}"
                    
                    
                    // Validar que el archivo samconfig.toml existe
                    sh 'if [ ! -f $SAM_CONFIG_PATH ]; then echo "samconfig.toml not found!"; exit 1; fi'

                    // Construir la aplicación con AWS SAM
                    sh 'sam build'

                    // Validar la configuración de SAM antes de desplegar
                    sh 'sam validate --region us-east-1'
                }
                
                /* sh '''
                    aws cloudformation delete-stack --stack-name todo-list-aws-production
                    aws cloudformation wait stack-delete-complete --stack-name todo-list-aws-production
                    sam deploy --resolve-s3 --config-file $SAM_CONFIG_PATH --config-env $ENVIRONMENT --no-confirm-changeset
                '''
                */
                //solo despliego si detecta cambios en el código
                script {
                    def changes = sh(script: "git diff --quiet || echo 'changed'", returnStdout: true).trim()
                    if (changes == "changed") {
                        echo "Changes detected, proceeding with deployment."
                        sh '''
                            sam deploy --resolve-s3 --config-file $SAM_CONFIG_PATH --config-env $ENVIRONMENT --no-confirm-changeset
                        '''
                    } else {
                        echo "No changes detected, skipping deployment."
                    }
                   
                }
            }
        }
        stage('Rest Test') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                
                //recupera la url de la api y se la asigna a la variable BASE_URL, que es la que recoge el archivo de pruebas 
                script {
                    def apiUrl = sh(script: '''
                        aws cloudformation describe-stacks --stack-name todo-list-aws-production --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text
                    ''', returnStdout: true).trim()
                    
                    env.BASE_URL = apiUrl
                }
                sh 'echo "BASE_URL: $BASE_URL"' // Para verificar la URL antes de correr los tests
                
                    sh '''
                        . /opt/venv/jenkins/bin/activate
                        pytest test/integration/todoApiTest.py -m readonly --junitxml=result-unit.xml
                    '''
                    junit 'result-unit.xml'
                }
            }
        }
    }
}